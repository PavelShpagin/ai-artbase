name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: pavelshpagin
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: pavelshpagin/aiartbase-backend:latest
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALGORITHM=${{ secrets.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
            CHROMA_DB_PATH=${{ secrets.CHROMA_DB_PATH }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
            R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
            R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
            R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
            R2_PUBLIC_URL=${{ secrets.R2_PUBLIC_URL }}
            API_URL=${{ secrets.API_URL }}
            OWNER_ID=${{ secrets.OWNER_ID }}

      - name: Build and push Scraper
        uses: docker/build-push-action@v2
        with:
          context: ./scraper
          push: true
          tags: pavelshpagin/aiartbase-scraper:latest
          build-args: |
            API_URL=${{ secrets.API_URL }}
            OWNER_ID=${{ secrets.OWNER_ID }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /root/aiartbase

            # Create stack file
            cat > docker-stack.yml << EOF
            version: '3.8'

            services:
              db:
                image: postgres:13
                ports:
                  - "5432:5432"
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=pirate228
                  - POSTGRES_DB=Ai_ArtBase
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - app-network
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 10s

              backend:
                image: pavelshpagin/aiartbase-backend:latest
                ports:
                  - "8000:8000"
                environment:
                  - DATABASE_URL=postgresql://postgres:pirate228@db:5432/Ai_ArtBase
                  - SECRET_KEY=${{ secrets.SECRET_KEY }}
                  - ALGORITHM=${{ secrets.ALGORITHM }}
                  - ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
                  - CHROMA_DB_PATH=${{ secrets.CHROMA_DB_PATH }}
                  - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                  - GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
                  - R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
                  - R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
                  - R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
                  - R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
                  - R2_PUBLIC_URL=${{ secrets.R2_PUBLIC_URL }}
                volumes:
                  - chroma_data:/app/chroma_data
                depends_on:
                  - db
                networks:
                  - app-network
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    delay: 10s
                    max_attempts: 5
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s

              scraper:
                image: pavelshpagin/aiartbase-scraper:latest
                environment:
                  - API_URL=http://backend:8000
                  - OWNER_ID=${{ secrets.OWNER_ID }}
                  - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                  - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
                depends_on:
                  - backend
                networks:
                  - app-network
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    delay: 60s
                    max_attempts: 5
                healthcheck:
                  test: ["CMD", "node", "-e", "require('http').get('http://backend:8000', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
                  interval: 1m
                  timeout: 10s
                  retries: 3
                  start_period: 2m

            networks:
              app-network:
                driver: overlay
                attachable: true

            volumes:
              postgres_data:
              chroma_data:
            EOF

            # Update existing stack or deploy new one
            if docker stack ls | grep -q "aiartbase"; then
              echo "Updating existing stack..."
              docker service update --image pavelshpagin/aiartbase-backend:latest aiartbase_backend
              docker service update --image pavelshpagin/aiartbase-scraper:latest aiartbase_scraper
            else
              echo "Deploying new stack..."
              docker stack deploy -c docker-stack.yml aiartbase
            fi

            # Check deployment status
            echo "Deployment completed. Checking service status..."
            sleep 15
            docker service ls
