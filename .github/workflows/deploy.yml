name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: pavelshpagin
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: pavelshpagin/aiartbase-backend:latest
          # Only pass non-sensitive build args
          build-args: |
            NODE_ENV=production
            # Pin NumPy version to avoid compatibility issues
            NUMPY_VERSION=1.24.4

      # - name: Build and push Scraper
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./scraper
      #     push: true
      #     tags: pavelshpagin/aiartbase-scraper:latest
      #     # Only pass non-sensitive build args
      #     build-args: |
      #       NODE_ENV=production

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /root/aiartbase

            # Clean up disk space if needed
            docker system prune -af

            # Pull latest images
            docker pull pavelshpagin/aiartbase-backend:latest
            # docker pull pavelshpagin/aiartbase-scraper:latest

            # Store environment variables from GitHub secrets
            cat > .env << EOF
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALGORITHM=${{ secrets.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
            CHROMA_DB_PATH=/app/chroma_data
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
            R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
            R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
            R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
            R2_PUBLIC_URL=${{ secrets.R2_PUBLIC_URL }}
            API_URL=${{ secrets.API_URL }}
            OWNER_ID=${{ secrets.OWNER_ID }}
            EOF

            # Create docker-compose file
            cat > docker-compose.yml << 'EOF'
            services:
              db:
                image: postgres:13
                container_name: aiartbase-db
                ports:
                  - "5432:5432"
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=pirate228
                  - POSTGRES_DB=Ai_ArtBase
                volumes:
                  - ~/aiartbase/volumes/postgres:/var/lib/postgresql/data
                restart: unless-stopped
                networks:
                  - app-network

              backend:
                image: pavelshpagin/aiartbase-backend:latest
                container_name: aiartbase-backend
                ports:
                  - "8000:8000"
                environment:
                  - DATABASE_URL=postgresql://postgres:pirate228@db:5432/Ai_ArtBase
                  - SECRET_KEY=${SECRET_KEY}
                  - ALGORITHM=${ALGORITHM}
                  - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
                  - CHROMA_DB_PATH=/app/chroma_data
                  - OPENAI_API_KEY=${OPENAI_API_KEY}
                  - GEMINI_API_KEY=${GEMINI_API_KEY}
                  - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
                  - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
                  - R2_ENDPOINT_URL=${R2_ENDPOINT_URL}
                  - R2_BUCKET_NAME=${R2_BUCKET_NAME}
                  - R2_PUBLIC_URL=${R2_PUBLIC_URL}
                  - API_URL=${API_URL}
                  - OWNER_ID=${OWNER_ID}
                volumes:
                  - ~/aiartbase/volumes/chroma_data:/app/chroma_data
                depends_on:
                  - db
                restart: unless-stopped
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge
            EOF

            # Deploy with Docker Compose
            docker compose down
            docker compose up -d

            # Show running containers
            docker compose ps

            # Display logs from services
            echo "Backend logs:"
            docker compose logs --tail 20 backend

            echo "Database logs:"
            docker compose logs --tail 20 db
